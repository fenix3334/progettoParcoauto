Traceback (most recent call last):
  File "C:\Users\lucagiuseppe.forti\Desktop\progettoParcoauto\venv\Lib\site-packages\flask\app.py", line 2213, in __call__
    return self.wsgi_app(environ, start_response)
           ~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\lucagiuseppe.forti\Desktop\progettoParcoauto\venv\Lib\site-packages\flask\app.py", line 2193, in wsgi_app
    response = self.handle_exception(e)
  File "C:\Users\lucagiuseppe.forti\Desktop\progettoParcoauto\venv\Lib\site-packages\flask\app.py", line 2190, in wsgi_app
    response = self.full_dispatch_request()
  File "C:\Users\lucagiuseppe.forti\Desktop\progettoParcoauto\venv\Lib\site-packages\flask\app.py", line 1486, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File "C:\Users\lucagiuseppe.forti\Desktop\progettoParcoauto\venv\Lib\site-packages\flask\app.py", line 1484, in full_dispatch_request
    rv = self.dispatch_request()
  File "C:\Users\lucagiuseppe.forti\Desktop\progettoParcoauto\venv\Lib\site-packages\flask\app.py", line 1469, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)
           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^
  File "C:\Users\lucagiuseppe.forti\Desktop\progettoParcoauto\app\routes\manutenzioni.py", line 38, in aggiungi_manutenzione
    return render_template('manutenzioni/form.html', form=form, titolo='Aggiungi Manutenzione')
  File "C:\Users\lucagiuseppe.forti\Desktop\progettoParcoauto\venv\Lib\site-packages\flask\templating.py", line 151, in render_template
    return _render(app, template, context)
  File "C:\Users\lucagiuseppe.forti\Desktop\progettoParcoauto\venv\Lib\site-packages\flask\templating.py", line 132, in _render
    rv = template.render(context)
  File "C:\Users\lucagiuseppe.forti\Desktop\progettoParcoauto\venv\Lib\site-packages\jinja2\environment.py", line 1301, in render
    self.environment.handle_exception()
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^^
  File "C:\Users\lucagiuseppe.forti\Desktop\progettoParcoauto\venv\Lib\site-packages\jinja2\environment.py", line 936, in handle_exception
    raise rewrite_traceback_stack(source=source)
  File "C:\Users\lucagiuseppe.forti\Desktop\progettoParcoauto\app\templates\manutenzioni\form.html", line 1, in top-level template code
    {% extends "base.html" %}
  File "C:\Users\lucagiuseppe.forti\Desktop\progettoParcoauto\app\templates\base.html", line 59, in top-level template code
    {% block content %}{% endblock %}
    ^^^^^^^^^^^^^^^^^
  File "C:\Users\lucagiuseppe.forti\Desktop\progettoParcoauto\app\templates\manutenzioni\form.html", line 35, in block 'content'
    {{ form.fornitore_id(class="form-select") }}
    ^^^^^^^^^
  File "C:\Users\lucagiuseppe.forti\Desktop\progettoParcoauto\venv\Lib\site-packages\wtforms\fields\core.py", line 172, in __call__
    return self.meta.render_field(self, kwargs)
           ~~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^
  File "C:\Users\lucagiuseppe.forti\Desktop\progettoParcoauto\venv\Lib\site-packages\wtforms\meta.py", line 64, in render_field
    return field.widget(field, **render_kw)
           ~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\lucagiuseppe.forti\Desktop\progettoParcoauto\venv\Lib\site-packages\wtforms\widgets\core.py", line 351, in __call__
    for val, label, selected in field.iter_choices():
                                ~~~~~~~~~~~~~~~~~~^^
  File "C:\Users\lucagiuseppe.forti\Desktop\progettoParcoauto\venv\Lib\site-packages\wtforms\fields\choices.py", line 116, in _choices_generator
    yield (value, label, self.coerce(value) == self.data)
                         ~~~~~~~~~~~^^^^^^^
ValueError: invalid literal for int() with base 10: ''
The debugger caught an exception in your WSGI application. You can now look at the traceback which led to the error.
To switch between the interactive traceback and the plaintext one, you can click on the "Traceback" headline. From the text traceback you can also create a paste of it. For code execution mouse-over the frame you want to debug and click on the console icon on the right side.

You can execute arbitrary Python code in the stack frames and there are some extra helpers available for introspection:

dump() shows all variables in the frame
dump(obj) dumps all that's known about the object